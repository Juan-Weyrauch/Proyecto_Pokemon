<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Facade.Battle">
            <summary>
            Static class responsible for managing the battle between two players.
            It includes turn selection, displaying the current player's options, 
            and delegating actions to the appropriate methods.
            
            You’re not re-creating the values; you’re simply accessing them as part of Battle.StartBattle. 
            When you pass player1 and player2 to Battle, you’re passing the references to these Player objects. 
            This means that Battle is using the same player instances created in Facade—it’s not making new copies of them.
            </summary>
        </member>
        <member name="M:Library.Facade.Battle.StartBattle">
            <summary>
            Starts the battle by selecting the turn order and guiding each player's actions.
            </summary>
        </member>
        <member name="M:Library.Facade.Battle.PlayerAction(Library.Game.Players.IPlayer,Library.Game.Players.IPlayer)">
            <summary>
            Handles the selected action for the current player's turn.
            </summary>
            <param name="player">The current player whose turn is being handled.</param>
            <param name="rival">The opposing player in the battle.</param>
        </member>
        <member name="M:Library.Facade.Battle.Attack(Library.Game.Players.IPlayer,Library.Game.Players.IPlayer)">
            <summary>
            This method is responsible for:
            1) Showing the available attacks to the player.
            2) Calling the damage Calculator and storing that int.
            3) Inflicting damage to the opponent's selected Pokémon.
            </summary>
            <param name="player">The player performing the attack.</param>
            <param name="rival">The opposing player who is receiving the attack.</param>
        </member>
        <member name="M:Library.Facade.Battle.VoluntarySwitchPokemon(Library.Game.Players.IPlayer)">
            <summary>
            Method that allows the player to voluntarily change their selected Pokémon during their turn.
            </summary>
            <param name="player">The player attempting to switch their Pokémon.</param>
            <returns>Returns a boolean indicating whether the Pokémon was successfully switched.</returns>
        </member>
        <member name="M:Library.Facade.Battle.ForceSwitchPokemon(Library.Game.Players.IPlayer)">
            <summary>
            Method that allows the player to change their Pokémon, forced by the defeat of the current Pokémon.
            </summary>
            <param name="player">The player who needs to switch their defeated Pokémon.</param>
        </member>
        <member name="M:Library.Facade.Battle.UseItemAux(Library.Game.Players.IPlayer,Library.Game.Players.IPlayer)">
            <summary>
            Method that allows the player to use an item during their turn. 
            Depending on the item, the player may use it on a Pokémon from their team or the cemetery.
            </summary>
            <param name="player">The player using the item.</param>
            <param name="rival">The opposing player in the battle.</param>
        </member>
        <member name="T:Library.Facade.Facade">
            <summary>
            Responsable for:
                1) Getting the users Info (Name, Pokémon Election)
                2) Calls for the creation of the players with their elections
                3) Calls the Battle class 
            </summary>
        </member>
        <member name="M:Library.Facade.Facade.Start">
            <summary>
            Starts the program and asks the player for the initial input
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.Attack.Name">
            <summary>
            Obtiene o establece el nombre del ataque.
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.Attack.Damage">
            <summary>
            Obtiene o establece el daño base que causa el ataque.
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.Attack.State">
            <summary>
            Obtiene o establece el estado que puede infligir el ataque al objetivo.
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.Attack.Type">
            <summary>
            Obtiene o establece el tipo elemental del ataque (por ejemplo, Fuego, Agua, etc.).
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.Attack.Special">
            <summary>
            Check if the attack is special or not
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.Attack.Accuracy">
            <summary>
            Obtiene o establece la precisión del ataque, representada como un porcentaje de éxito (0-100).
            </summary>
        </member>
        <member name="M:Library.Game.Attacks.Attack.#ctor(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Game.Attacks.Attack"/> con los valores especificados.
            </summary>
        </member>
        <member name="M:Library.Game.Attacks.Attack.IsCritical">
            <summary>
            Calcula si el ataque es crítico.
            Un ataque es crítico con una probabilidad de 10%.
            </summary>
            <returns>True si el ataque es crítico, de lo contrario False.</returns>
        </member>
        <member name="T:Library.Game.Attacks.AttackGenerator">
            <summary>
            This static class is responsible for creating a list of attacks depending on the Pokémon type.
            </summary>
        </member>
        <member name="M:Library.Game.Attacks.AttackGenerator.GenerateRandomAttack(System.String)">
            <summary>
            Generates a random list of attacks for the specified Pokémon type.
            </summary>
            <param name="type">The type of Pokémon.</param>
            <returns>A list of attacks: three of the Pokémon's type and one random attack from another type.</returns>
        </member>
        <member name="T:Library.Game.Attacks.IAttack">
            <summary>
            
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.IAttack.Name">
            <summary>
            Name of the attack
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.IAttack.Damage">
            <summary>
            Damage to the attack
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.IAttack.Special">
            <summary>
            Check if the attack is special or not
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.IAttack.Type">
            <summary>
            Sets the type of the attack.
            We use this to check for effectiveness against other Pokémon types.
            </summary>
        </member>
        <member name="M:Library.Game.Attacks.IAttack.IsCritical">
            <summary>
            Determina si el ataque es crítico.
            Un ataque es crítico con una probabilidad de 10%.
            </summary>
        </member>
        <member name="P:Library.Game.Attacks.IAttack.Accuracy">
            <summary>
            Obtiene o establece la precisión del ataque.
            Representa el porcentaje de acierto del ataque (0-100).
            </summary>
        </member>
        <member name="T:Library.Game.Items.Item">
            <summary>
            Class abstract that let us create the items using inheritance. 
            </summary>
        </member>
        <member name="M:Library.Game.Items.Item.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Library.Game.Items.Item.Name">
            <summary>
            El nombre del item.
            </summary>
        </member>
        <member name="M:Library.Game.Items.Item.Use(Library.Game.Pokemons.IPokemon)">
            <summary>
            Aplica el efecto del objeto en el Pokémon especificado.
            </summary>
            <param name="pokemon">El Pokémon en el que se usará el objeto.</param>
        </member>
        <member name="T:Library.Game.Items.RevivePotion">
            <summary>
            This is a potion item, it allows the player to revive a dead pokemon.
            </summary>
        </member>
        <member name="M:Library.Game.Items.RevivePotion.#ctor">
            <summary>
            Constructor of revive.
            </summary>
        </member>
        <member name="M:Library.Game.Items.RevivePotion.Use(Library.Game.Pokemons.IPokemon)">
            <summary>
            Let select the pokemon to utilize the effect of the potion
            </summary>
            <param name="pokemon"> Pokemon selected by the player</param>
        </member>
        <member name="T:Library.Game.Items.SuperPotion">
            <summary>
            This super potion regenerates 70 points of HP to the Pokémon.
            </summary>
        </member>
        <member name="M:Library.Game.Items.SuperPotion.#ctor">
            <summary>
            Constructor of the Potion
            </summary>
        </member>
        <member name="M:Library.Game.Items.SuperPotion.Use(Library.Game.Pokemons.IPokemon)">
            <summary>
            The constructor for the class.
            </summary>
        </member>
        <member name="T:Library.Game.Items.TotalCure">
            <summary>
            This class Creates a potion that allows the player to cure the chosen Pokémon to 100% of HP.
            </summary>
        </member>
        <member name="M:Library.Game.Items.TotalCure.#ctor">
            <summary>
            This is the constructor of the class that let us cure a pokemon 
            </summary>
        </member>
        <member name="M:Library.Game.Items.TotalCure.Use(Library.Game.Pokemons.IPokemon)">
            <inheritdoc />
            <summary>
            The function to use the pokemon and use the total cure potion..
            </summary>
        </member>
        <member name="T:Library.Game.Players.IPlayer">
            <summary>
            Interface for the player class. This defines the methods and properties
            a player object should implement to interact with Pokémon and battle mechanics.
            </summary>
        </member>
        <member name="P:Library.Game.Players.IPlayer.Name">
            <summary>
            Gets the name of the player.
            </summary>
        </member>
        <member name="P:Library.Game.Players.IPlayer.Pokemons">
            <summary>
            A list containing all the player's Pokémon.
            </summary>
        </member>
        <member name="P:Library.Game.Players.IPlayer.Cementerio">
            <summary>
            A list of all the Pokémon that are out of battle (i.e., "dead" or not active).
            </summary>
        </member>
        <member name="P:Library.Game.Players.IPlayer.Items">
            <summary>
            A list containing all the player's items (potions, revival items, etc.).
            This list is updated during the battle as items are used or removed.
            </summary>
        </member>
        <member name="P:Library.Game.Players.IPlayer.SelectedPokemon">
            <summary>
            The current selected Pokémon of the player.
            </summary>
        </member>
        <member name="P:Library.Game.Players.IPlayer.Turn">
            <summary>
            The current turn of the player, used for attack cooldown.
            </summary>
        </member>
        <member name="M:Library.Game.Players.IPlayer.SwitchPokemon(System.Int32)">
            <summary>
            Changes the selected Pokémon for a new one based on the player's choice.
            </summary>
            <param name="pokemonChoice">The index of the new Pokémon selected from the player's Pokémon list.</param>
        </member>
        <member name="M:Library.Game.Players.IPlayer.CarryToCementerio">
            <summary>
            Moves the currently "dead" Pokémon to the cemetery list of Pokémon that are no longer in battle.
            This method is called when a Pokémon is fainted.
            </summary>
        </member>
        <member name="M:Library.Game.Players.IPlayer.GetItem(System.Int32)">
            <summary>
            Retrieves the item from the player's item list based on the provided index.
            </summary>
            <param name="itemListIndex">The index of the item in the list to be retrieved.</param>
            <returns>The item corresponding to the provided index.</returns>
        </member>
        <member name="M:Library.Game.Players.IPlayer.RemoveItem(System.Int32)">
            <summary>
            Removes the item from the player's item list based on the provided index.
            </summary>
            <param name="itemListIndex">The index of the item in the list to be removed.</param>
        </member>
        <member name="T:Library.Game.Players.Player">
            <inheritdoc />
        </member>
        <member name="P:Library.Game.Players.Player.Player1">
            <summary>
            Property to access Player1 singleton instance.
            Throws an exception if Player1 has not been initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when Player1 has not been initialized.</exception>
        </member>
        <member name="P:Library.Game.Players.Player.Player2">
            <summary>
            Property to access Player2 singleton instance.
            Throws an exception if Player2 has not been initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when Player2 has not been initialized.</exception>
        </member>
        <member name="P:Library.Game.Players.Player.Name">
            <summary>
            The name of the player.
            </summary>
        </member>
        <member name="P:Library.Game.Players.Player.Pokemons">
            <summary>
            The list of Pokémon owned by the player.
            </summary>
        </member>
        <member name="P:Library.Game.Players.Player.Cementerio">
            <summary>
            The list of Pokémon that are out of battle (dead or fainted).
            </summary>
        </member>
        <member name="P:Library.Game.Players.Player.Items">
            <summary>
            The list of items the player possesses (potions, revival items, etc.).
            </summary>
        </member>
        <member name="P:Library.Game.Players.Player.SelectedPokemon">
            <summary>
            The currently selected Pokémon for the player.
            </summary>
        </member>
        <member name="P:Library.Game.Players.Player.Turn">
            <summary>
            The current turn of the player, used for attack cooldown.
            </summary>
        </member>
        <member name="M:Library.Game.Players.Player.#ctor(System.String,System.Collections.Generic.List{Library.Game.Pokemons.IPokemon},Library.Game.Pokemons.IPokemon)">
            <summary>
            Private constructor for creating a new Player instance.
            </summary>
            <param name="name">The name of the player.</param>
            <param name="pokemons">The list of Pokémon the player owns.</param>
            <param name="selectedPokemon">The Pokémon the player selects to fight with.</param>
        </member>
        <member name="M:Library.Game.Players.Player.InitializePlayer1(System.String,System.Collections.Generic.List{Library.Game.Pokemons.IPokemon},Library.Game.Pokemons.IPokemon)">
            <summary>
            Initializes Player1 with the given name, Pokémon, and selected Pokémon.
            </summary>
            <param name="name">The name of Player1.</param>
            <param name="pokemons">The list of Pokémon Player1 owns.</param>
            <param name="selectedPokemon">The Pokémon Player1 selects to fight with.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if Player1 is already initialized.</exception>
        </member>
        <member name="M:Library.Game.Players.Player.InitializePlayer2(System.String,System.Collections.Generic.List{Library.Game.Pokemons.IPokemon},Library.Game.Pokemons.IPokemon)">
            <summary>
            Initializes Player2 with the given name, Pokémon, and selected Pokémon.
            </summary>
            <param name="name">The name of Player2.</param>
            <param name="pokemons">The list of Pokémon Player2 owns.</param>
            <param name="selectedPokemon">The Pokémon Player2 selects to fight with.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if Player2 is already initialized.</exception>
        </member>
        <member name="M:Library.Game.Players.Player.SwitchPokemon(System.Int32)">
            <summary>
            Switches the player's selected Pokémon based on the player's choice.
            </summary>
            <param name="pokemonChoice">The index of the Pokémon selected by the player.</param>
        </member>
        <member name="M:Library.Game.Players.Player.CarryToCementerio">
            <summary>
            Moves the currently selected Pokémon to the cemetery list and removes it from the player's active Pokémon list.
            </summary>
        </member>
        <member name="M:Library.Game.Players.Player.GetItem(System.Int32)">
            <summary>
            Retrieves an item from the player's inventory based on the given index.
            </summary>
            <param name="itemListIndex">The index of the item in the player's inventory list.</param>
            <returns>The item selected by the player.</returns>
        </member>
        <member name="M:Library.Game.Players.Player.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the player's inventory list based on the given index.
            </summary>
            <param name="itemListIndex">The index of the item to remove from the inventory.</param>
        </member>
        <member name="T:Library.Game.Pokemons.IPokemon">
            <summary>
            Interface for Pokémon 
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.IPokemon.Name">
            <summary>
            Name for Pokémon
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.IPokemon.Health">
            <summary>
            HP points of the Pokémon
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.IPokemon.InitialHealth">
            <summary>
            Initial health of the Pokémon
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.IPokemon.Defense">
            <summary>
            The Pokémon must have a defense status
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.IPokemon.Type">
            <summary>
            Sets the type of the Pokémon.
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.IPokemon.State">
            <summary>
            Sets the state of the Pokémon.
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.IPokemon.AtackList">
            <summary>
            A list of all the attacks that the Pokémon has.
            </summary>
        </member>
        <member name="M:Library.Game.Pokemons.IPokemon.GetAttack(System.Int32)">
            <summary>
            Returns the attack depending on the index inputted.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Game.Pokemons.IPokemon.Clone">
            <summary>
            Clones the attack so that there can exist multiple instances of the same.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Game.Pokemons.IPokemon.DecreaseHealth(System.Int32)">
            <summary>
            Método para reducir la salud del Pokémon.
            </summary>
        </member>
        <member name="T:Library.Game.Pokemons.Pokemon">
            <summary>
            Pokémon class.
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.Pokemon.Name">
            <summary>
            Name for Pokémon
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.Pokemon.Health">
            <summary>
            Health of the Pokémon
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.Pokemon.Defense">
            <summary>
            The Pokémon must have a defense status
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.Pokemon.Type">
            <summary>
            Sets the type of the Pokémon
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.Pokemon.State">
            <summary>
            Sets the state of the Pokémon (1,2,3,4).
            </summary>
        </member>
        <member name="P:Library.Game.Pokemons.Pokemon.AtackList">
            <summary>
            A list of all the attacks that the Pokémon has 
            </summary>
        </member>
        <member name="M:Library.Game.Pokemons.Pokemon.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.List{Library.Game.Attacks.IAttack})">
            <summary>
            Constructor for the class Pokémon.
            </summary>
            <param name="name"></param>
            <param name="defense"></param>
            <param name="type"></param>
            <param name="atacks"></param>
        </member>
        <member name="M:Library.Game.Pokemons.Pokemon.GetAttack(System.Int32)">
            <summary>
            Returns the attack selected by the player
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Library.Game.Pokemons.Pokemon.InitialHealth">
            <summary>
            Initial health of the Pokémon.
            </summary>
        </member>
        <member name="M:Library.Game.Pokemons.Pokemon.Clone">
            <summary>
            Clones the Pokémon so that there can be  multiple instances of the same.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Game.Pokemons.Pokemon.DecreaseHealth(System.Int32)">
            <summary>
            Disminuye la salud del Pokémon por la cantidad de daño recibido.
            Si la salud se vuelve negativa, se ajusta a 0.
            </summary>
        </member>
        <member name="T:Library.Game.Utilities.Calculator">
            <summary>
            This class has the responsibilities of making calculations, these being:
                - Index in range
                - Approving of inputs
                - Damage calculations
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Calculator.GetEffectivenessMultiplier(System.String,System.String)">
            <summary>
            Method that returns the numeric percentage of boost (or not) that the attack has on the opponent. 
            </summary>
            <param name="attackType"></param>
            <param name="pokemonType"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Game.Utilities.Calculator.CheckEffectiveness(Library.Game.Attacks.IAttack,Library.Game.Pokemons.IPokemon)">
            <summary>
            Checks for effectiveness in the attack received.
            It compares the attack type to the Pokémon type and returns a double value for the effectiveness.
            </summary>
            <param name="attack"></param>
            <param name="pokemon"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Game.Utilities.Calculator.ValidateSelectionInGivenRange(System.Int32,System.Int32)">
            <summary>
            Function to validate that a number is in between two given values and checks if the input is an integer.
            This function also reads the number inputted, this is so that the 'asking'
            and the 'validation' can happen in the same line.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Game.Utilities.Calculator.FirstTurnSelection">
            <summary>
            Sets randomly the first player.
            </summary>
            <returns>integer 1 or 2</returns>
        </member>
        <member name="M:Library.Game.Utilities.Calculator.HasActivePokemon(Library.Game.Players.IPlayer)">
            <summary>
            This method checks if the player has any active Pokémon.
            </summary>
            <param name="player"></param>
            <returns>True if the player has Pokémon, False if not</returns>
        </member>
        <member name="M:Library.Game.Utilities.Calculator.InfringeDamage(Library.Game.Attacks.IAttack,Library.Game.Pokemons.IPokemon,System.Int32)">
            <summary>
            This class is responsible for:
                1) Determining the effectiveness of the attack used.
            </summary>
            <param name="attack"></param>
            <param name="rival"></param>
        </member>
        <member name="M:Library.Game.Utilities.Calculator.DoDamage(System.Int32,Library.Game.Pokemons.IPokemon)">
            <summary>
            This method calculates the damage and applies it to the rival's Pokémon.
            </summary>
            <param name="damage">The amount of damage inflicted.</param>
            <param name="pokemon">The Pokémon receiving the damage.</param>
        </member>
        <member name="T:Library.Game.Utilities.Catalogue">
            <summary>
            This class receives a created Pokémon and adds it to its catalog.
            </summary>
        </member>
        <member name="F:Library.Game.Utilities.Catalogue._pokedex">
            <summary>
            Contains all the Pokémon.
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Catalogue.CreateCatalogue">
            <summary>
            Creates the catalog, initializing all Pokémon.
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Catalogue.GetPokedex">
            <summary>
            Returns the complete catalogue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Game.Utilities.Catalogue.GetPokemon(System.Int32)">
            <summary>
            Returns the Pokémon that the user picked so that it can be added to its inventory.
            </summary>
            <param name="pokemonId"></param>
            <returns></returns>
        </member>
        <member name="T:Library.Game.Utilities.Create">
            <summary>
            This class is suposed to create all elements needed in the game.
            These are:
                - The Pokédex / Pokémon Catalogue
            </summary>
        </member>
        <member name="F:Library.Game.Utilities.Create.Pokedex">
            <summary>
            This Dictionary holds all the Pokémon.
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Create.CreateCatalogue">
            <summary>
            This method creates ALL the Pokémon
            </summary>
        </member>
        <member name="T:Library.Game.Utilities.Printer">
            <summary>
            This class is responsible for showing the user what's happening on console
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Printer.StartPrint">
            <summary>
            Shows the message that starts the game
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Printer.EndPrint">
            <summary>
            Prints the end of the game when you select to leave at the beginning 
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Printer.DisplayWinner(System.String)">
            <summary>
            Recieves the winners name a displays a box indicating the winner.
            </summary>
            <param name="winner"></param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.IndexOutOfRange(System.Int32,System.Int32)">
            <summary>
            Sends a sign if the index is out of range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.NameSelection">
            <summary>
            This method has to show an "enter your name" badge/
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Printer.YourTurn(System.String)">
            <summary>
            Shows a box specifying who has to play
            </summary>
            <param name="name">Name of the player whose turn it is.</param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.ShowCatalogue(System.Collections.Generic.Dictionary{System.Int32,Library.Game.Pokemons.IPokemon})">
            <summary>
            This method has to show the player all the Pokémon available for selection in a fashion manner.
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Printer.CloseBoxes(System.Collections.Generic.List{System.String[]})">
            <summary>
            Closes each Pokémon box with the bottom border.
            </summary>
            <param name="boxes">The list of Pokémon box strings to be closed.</param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.FormatPokemonBox(System.Int32,System.String,System.Int32)">
            <summary>
            Formats a Pokémon entry as an array of strings representing each line of the box.
            </summary>
            <param name="index">The index of the Pokémon.</param>
            <param name="name">The name of the Pokémon.</param>
            <param name="life"></param>
            <returns>An array of strings, each representing a line in the box format.</returns>
        </member>
        <member name="M:Library.Game.Utilities.Printer.PrintRow(System.Collections.Generic.List{System.String[]})">
            <summary>
            Prints a row of Pokémon boxes side-by-side without adding extra spaces between boxes.
            </summary>
            <param name="boxes">List of box lines for the row.</param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.AskForPokemon(System.Int32,System.String)">
            <summary>
            Prints a box so that the user can visualize what he's doing.
            </summary>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.ShowInventory(System.Collections.Generic.List{Library.Game.Pokemons.IPokemon})">
            <summary>
            Shows the user inventory in a boxed format.
            </summary>
            <param name="inventory">List of IPokemon items, between 1 and 6 items.</param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.PrintInventoryHeader">
            <summary>
            Prints the header box for the inventory.
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Printer.ShowSelectedPokemon(Library.Game.Pokemons.IPokemon,System.String)">
            <summary>
            Shows the player it's Pokémon.
            </summary>
            <param name="pokemon"></param>
            <param name="name"></param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.ShowAttacks(Library.Game.Pokemons.IPokemon,Library.Game.Pokemons.IPokemon)">
            <summary>
            Show the attacks of each Pokémon, displaying if they are special, the damage they deal, and their effectiveness.
            </summary>
            <param name="attacker">The Pokémon whose attacks will be displayed.</param>
            <param name="receiver">The Pokémon that will receive the attack.</param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.ShowTurnInfo(Library.Game.Players.IPlayer,Library.Game.Pokemons.IPokemon)">
            <summary>
            Displays whose turn it is and prompts the player to choose an action.
            </summary>
            /// <summary>
            Prints the current and initial health of the Pokémon.
            </summary>
            <param name="player"></param>
            <param name="pokemon">The Pokémon whose health will be shown.</param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.Effectiveness(System.Int32,Library.Game.Attacks.IAttack)">
            <summary>
            This method prints to the usser the effectiveness after each attack.
            Gets called in: Calculator.InfringeDamage()
            </summary>
            <param name="value"></param>
            <param name="attack"></param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.ForceSwitchMessage(Library.Game.Players.IPlayer)">
            <summary>
            Shows the player that it's Pokémon has been defeated and that it needs to change the current one.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.SwitchQuestion(Library.Game.Players.IPlayer)">
            <summary>
            Asks the player for confirmation.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.SwitchConfirmation(Library.Game.Players.IPlayer,System.Int32)">
            <summary>
            Asks the player for confirmation.
            </summary>
            <param name="player"></param>
            <param name="option"></param>
        </member>
        <member name="M:Library.Game.Utilities.Printer.CancelSwitchMessage">
            <summary>
            Lets the player see that the action has been canceled.
            </summary>
        </member>
        <member name="M:Library.Game.Utilities.Printer.PrintearItems(System.Collections.Generic.List{System.Collections.Generic.List{Library.Game.Items.Item}})">
            <summary>
            This a method to print the list of items from each player, this make possible that
            we can give this information to the player.
            </summary>
            <param name="items">List of items of the player.  </param>
        </member>
    </members>
</doc>
